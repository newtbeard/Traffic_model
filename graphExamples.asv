clc; clear all;

ff =@(x) x^-2; %friction function
fe =@(x) exp(-.35*(x-1)); %friction exponential
numNodes = 10;
totalPop = 500;
nodePos = rand(numNodes,2)*10;
%approx distro of population
pops = rand(numNodes,1);
pops = int8((pops/sum(pops))*100);
pops = double(pops);
attr = rand(numNodes,1);
attr = int8((attr/sum(attr))*100);
attr = double(attr);
%data structure
nodes = struct('pop', {}, ...
               'attrtactions',       {}, ...
               'pos',        {});  
for i= 1:numNodes
    nodes(i).pop = pops(i); %All population travels
    nodes(i).attractions =attr(i);    
    nodes(i).pos = nodePos(1,:);
end

%A 2-D Delaunay triangulation ensures that the circumcircle
%associated with each triangle contains no other point in its interior. 
%tri gives the adjacency matrix for each triangle
tri = delaunay(nodePos(:,1),nodePos(:,2));

elem = ones(3);
for i = 1:length(tri)
A(tri(i,:),tri(i,:)) = elem;
end
A = double(A > 0);
%Assign values for the Impedance funtion onto the A (adjacency matrix)
imp = A;
for i=1:length(A(:,1))
    for j=1:length(A(1,:))
        imp(i,j) = imp(i,j)*rand()*100;
    end    
end
imp = double(int8(imp));
tripff = A*0;
tripfe = tripff;
%Trip Generation Calculation
for i=1:length(A(:,1))
    den = 0;
    denfe = 0;
    for j=1:length(A(1,:))        
        if A(i,j) == 1  % there is a connection, else shortcircuit loop
            tripff(i,j) = nodes(j).attractions*ff(imp(i,j));
            tripfe(i,j) = nodes(j).attractions*fe(imp(i,j));
            denfe = tripfe(i,j) + denfe;  
            den = tripff(i,j) + den;  
        end
    end    
    tripff(i,:) = tripff(i,:)*nodes(i).pop;
    tripff(i,:) = tripff(i,:)/den;
    tripfe(i,:) = tripfe(i,:)*nodes(i).pop;
    tripfe(i,:) = tripfe(i,:)/denfe;
end
%These should sum up to total population
sum(sum(tripff))
sum(sum(tripfe))
%trip distro tables
tripff
tripfe
% figure(1)
% gplot(A,nodePos,'-O')
figure(2)
title('Impedance Distribution')
wgPlot(imp,nodePos,'vertexWeight',pops,'vertexMetaData',attr,'edgeWidth',2,'edgeColorMap',jet,'vertexColorMap',cool);
%xlabel('Impedance'); ylabel('# of Attaractions'); 
figure(3)
title('Inverse Square Trip Distribution')
wgPlot(tripff,nodePos,'vertexWeight',pops*100,'vertexMetaData',attr,'edgeWidth',2,'edgeColorMap',jet,'vertexColorMap',cool);
figure(4)
title('Decaying Exponenetial Trip Distribution')
wgPlot(tripfe,nodePos,'vertexWeight',pops*100,'vertexMetaData',attr,'edgeWidth',2,'edgeColorMap',jet,'vertexColorMap',cool);